#!/bin/bash

echo "üöÄ [INFO] Initialisation du pipeline Kafka..."

# üîπ V√©rifier si le r√©seau Docker kafka_network existe, sinon le cr√©er
NETWORK_NAME="kafka_network"

if ! docker network inspect $NETWORK_NAME &>/dev/null; then
    echo "üîÑ [INFO] Cr√©ation du r√©seau Docker : $NETWORK_NAME"
    docker network create $NETWORK_NAME
else
    echo "‚úÖ [INFO] R√©seau $NETWORK_NAME d√©j√† existant"
fi

# üîπ D√©marrer les conteneurs avec Docker Compose
echo "üõ†Ô∏è [INFO] D√©marrage de Kafka, Prometheus, Grafana..."
docker-compose up -d

# üîπ Attendre que tous les conteneurs soient bien "running"
echo "‚è≥ [INFO] V√©rification de l'√©tat des conteneurs..."
sleep 5
for container in kafka1 kafka2 kafka3 prometheus grafana kafka-exporter; do
    echo "üîç [INFO] V√©rification de $container..."
    while ! docker inspect -f '{{.State.Running}}' $container &>/dev/null || [ "$(docker inspect -f '{{.State.Running}}' $container)" != "true" ]; do
        echo "‚è≥ [ATTENTE] $container n'est pas encore pr√™t... Retente dans 3s"
        sleep 3
    done
    echo "‚úÖ [OK] $container est pr√™t !"
done

# üîπ V√©rifier et ajouter les conteneurs au r√©seau si n√©cessaire
CONTAINERS=("kafka1" "kafka2" "kafka3" "prometheus" "grafana" "kafka-exporter")

for container in "${CONTAINERS[@]}"; do
    if ! docker network inspect $NETWORK_NAME | grep -q "$container"; then
        echo "üîó [INFO] Ajout du conteneur $container au r√©seau $NETWORK_NAME..."
        docker network connect $NETWORK_NAME $container
    else
        echo "‚úÖ [INFO] Conteneur $container d√©j√† connect√© √† $NETWORK_NAME"
    fi
done

# üîπ Attente dynamique pour que Kafka soit r√©ellement pr√™t
echo "‚è≥ [INFO] V√©rification de la disponibilit√© de Kafka..."
MAX_RETRIES=10
RETRY_INTERVAL=5
for i in $(seq 1 $MAX_RETRIES); do
    if docker-compose exec -T kafka1 kafka-topics --bootstrap-server kafka1:9092 --list &>/dev/null; then
        echo "‚úÖ [INFO] Kafka est accessible !"
        break
    fi
    echo "‚è≥ [ATTENTE] Kafka n'est pas encore pr√™t... Retente dans $RETRY_INTERVAL secondes ($i/$MAX_RETRIES)"
    sleep $RETRY_INTERVAL
done